/* Test the Inet_checker class
 */

/*   Part of the rsked package.
 *
 *   Copyright 2020 Steven A. Harp
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

/// Dynamically link boost test framework
#define BOOST_TEST_MODULE sked_test
#ifndef BOOST_TEST_DYN_LINK
#define BOOST_TEST_DYN_LINK 1
#endif
#include <boost/test/unit_test.hpp>
#include <boost/test/data/test_case.hpp>
#include <boost/test/data/monomorphic.hpp>

#include "inetcheck.hpp"
#include "logging.hpp"
#include "config.hpp"


namespace bdata = boost::unit_test::data;
namespace fs = boost::filesystem;

/// Simple test fixture that just handles logging setup/teardown.
///
struct LogFixture {
    LogFixture() {
        init_logging("tncheck","tncheck_%5N.log",LF_FILE|LF_DEBUG);
    }
    ~LogFixture() {
        finish_logging();
    }
};

BOOST_TEST_GLOBAL_FIXTURE( LogFixture );

void describe( const Inet_checker &chkr )
{
    LOG_INFO(Lgr) << "enabled=" << chkr.enabled();
    LOG_INFO(Lgr) << "refresh interval=" << chkr.refresh_secs();
    LOG_INFO(Lgr) << "status path=" << chkr.status_path();
}


/// Write to spath a status file like that generated by check_inet.sh
///
void write_status( const fs::path &spath, int scode, const char* msg )
{
    fs::ofstream sfile( spath );
    sfile << scode << ' ';
    //
    // RFC time like: 2020-05-20 05:22:58-05:00
    time_t rawtime;
    struct tm *timeinfo;
    time(&rawtime);
    timeinfo = localtime(&rawtime);
    char tbuf[128];
    strftime(tbuf,sizeof(tbuf),"%F %T%z ",timeinfo);
    sfile << tbuf;
    //
    sfile << (scode ? "BAD " : "GOOD ") << msg << '\n';
}


/// Return checker result and log it.
///
bool is_up( Inet_checker &ichecker )
{
    bool res = ichecker.inet_ready();
    if (res) {
        LOG_INFO(Lgr) << "Checker says internet is UP";
    } else {
        LOG_INFO(Lgr) << "Checker says internet is DOWN";
    }
    time_t ct = ichecker.last_check_time();
    LOG_INFO(Lgr) << "Last time polled was " << ctime(&ct);
    return res;
}


//////////////////////////////////////////////////////////////////////////

/// Load should succeed if check_inet.sh is running. Uses tncheck2.json
/// which alters all parameters.
///
BOOST_AUTO_TEST_CASE( config_test )
{
    constexpr const char* confname="../test/tncheck2.json";
    LOG_INFO(Lgr) << "***************************************************";
    LOG_INFO(Lgr) << "TEST *** config_test";
    Inet_checker  ichecker;
    boost::filesystem::path dspath;
    dspath = std::string(getenv("XDG_RUNTIME_DIR")) + "/netstat";

    // Default configuration
    describe(ichecker);
    BOOST_TEST( ichecker.enabled()==true );
    BOOST_TEST( ichecker.refresh_secs()==60 );
    BOOST_TEST( ichecker.status_path() == dspath);

    // Load configuration
    Config config(confname);
    config.read_config();
    ichecker.configure( config );
    describe(ichecker);
    BOOST_TEST( ichecker.enabled()==false );
    BOOST_TEST( ichecker.refresh_secs()==1001 );
    BOOST_TEST( ichecker.status_path() == "/tmp/tncheck");
}



//////////////////////////////////////////////////////////////////////////

/// Should detect UP
///
BOOST_AUTO_TEST_CASE( check_test_up )
{
    LOG_INFO(Lgr) << "***************************************************";
    LOG_INFO(Lgr) << "TEST *** check_test up";
    Inet_checker  ichecker;

    write_status( ichecker.status_path(), 0, "network appears usable");
    BOOST_TEST( is_up(ichecker) );
}

//////////////////////////////////////////////////////////////////////////

/// Should detect DOWN
///
BOOST_AUTO_TEST_CASE( check_test_down )
{
    LOG_INFO(Lgr) << "***************************************************";
    LOG_INFO(Lgr) << "TEST *** check_test down";
    Inet_checker  ichecker;

    write_status( ichecker.status_path(), 1, "network is foobar");
    BOOST_TEST(not is_up(ichecker) );
}


//////////////////////////////////////////////////////////////////////////

/// Should detect DOWN then UP after 2 seconds
///
BOOST_AUTO_TEST_CASE( check_test_poll )
{
    LOG_INFO(Lgr) << "***************************************************";
    LOG_INFO(Lgr) << "TEST *** check_test poll";
    Inet_checker  ichecker;

    ichecker.set_refresh_secs(2);
    BOOST_TEST( 2 == ichecker.refresh_secs() );

    write_status( ichecker.status_path(), 1, "network is foobar");
    BOOST_TEST(not is_up(ichecker) );

    write_status( ichecker.status_path(), 0, "network appears usable");
    sleep(1);
    // after just 1 second, using cached value: false
    BOOST_TEST(not is_up(ichecker) );

    sleep(1);
    // after 2 seconds, using cached value: false
    BOOST_TEST(is_up(ichecker) );
}
